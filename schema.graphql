"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input AddFriendInput {
  user_id_friend: ID
}

input AddMemberFriendGroupInput {
  id: ID!
  member_ids: [ID!]!
}

input AssignPermissionInput {
  permission_ids: [ID!]!
  role_id: ID!
}

input AssignRoleInput {
  role_ids: [ID!]!
  user_id: ID!
}

type Attachment {
  id: ID
  file: String
  thumb: String
}

type AuthPayload {
  access_token: String
  refresh_token: String
  expires_in: Int
  token_type: String
  user: User
}

type ChangeEmail {
  id: ID
  user: User
  old_email: String
  new_email: String
  created_at: DateTime
  updated_at: DateTime
}

type checkCoupon {
  code: String
  code_sale: Int
  type: String
  name_goal: String
  price: Int
  sale: Int
}

type CheckGoal {
  id: ID!
  user: User
  goal: Goal
  type: Type!
  checked: Int!
  created_at: DateTime!
  updated_at: DateTime!
}

type CoachMember {
  id: ID
  user: User
  goal_ids: JSON
  goal_root: GoalRoot
  goals: [GoalRoot]
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of CoachMember items."""
type CoachMemberPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of CoachMember items."""
  data: [CoachMember!]!
}

input ConfirmEmailInput {
  new_email: String
  password: String
}

type Coupon {
  id: ID
  user: User
  code: String
  limit: Int
  goal_root_ids: [ID]
  remaining: Int
  sale_percent: Int
  expiry_date: DateTime
  created_at: DateTime
  updated_at: DateTime
}

input CreateFriendGroupInput {
  name: String
  member_ids: [ID]
  description: String
  avatar: String
}

input CreateGoalInput {
  id: String
  name: String
  parent_id: ID
  root_id: ID
  report_type: String
}

input CreateGoalMemberInput {
  add_user_id: ID
  goal_id: ID
}

input CreateGoalRootInput {
  name: String
  description: String
  price: String
  status: String
  video: JSON
  image: JSON
  owner_percent: String
  start_day: DateTime
  end_day: DateTime
  trial_blocks: JSON
  is_trial: Boolean
}

input CreateGoalTemplateInput {
  goal_id: ID
  status: String
  request: String
  sell_goal: String
  message: String
}

input CreateHistoryPaymentInput {
  user_id: ID!
  payment_id: ID!
  note: String!
}

input CreateJapaneseGoalInput {
  name_goal: String
  goal_id: ID
  parent_id: ID
  type: String
  more: JSON
  total_score: Float
  score: Float
  each_score: Float
  root_id: ID
}

input CreateJapaneseKanjiInput {
  name: String
  more: JSON
}

input CreateJapanesePostInput {
  goal_id: ID
  title: String
  type: String
  description: String
  media: JSON
  likes: JSON
  more: JSON
}

input CreateNoteInput {
  type_id: ID
  type: String
  content: String
  text_color: String
  checked_at: String
}

input CreateNotifiCommentInput {
  user_sent: ID!
  user_receiver: ID!
  content: String!
  goal_id: ID!
  post_id: ID
  is_reply: Boolean!
}

input CreatePaymentInput {
  add_user_id: ID
  goal_id: ID
  status: STATUS
  type: String
  user_info: JSON
  money: String
  note: String
  attachments: JSON
}

input CreateRoleOrPermissionInput {
  name: String!
  type: TYPE!
}

input CreateStoryShareInput {
  goal_id: ID
  image: String
  content: String
  reviewers: [ID]
}

input CreateTaskInput {
  name: String
  status: String
  repeat: String
  at_time: String
  reminder: String
  text_color: String
  created_at: String
}

input CreateUserEditGoalInput {
  user_id: ID!
  goal_root_id: ID!
}

"""A date string with format `Y-m-d`, e.g. `2011-05-23`."""
scalar Date

"""
A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.
"""
scalar DateTime

input DeleteCoachFromGoal {
  user_id: ID
  goal_root_id: ID
}

input DeleteCoachMemberInput {
  id: ID
}

input DeleteCouponInput {
  id: ID!
}

input DeleteFriendGroupInput {
  id: ID!
}

input DeleteFriendInput {
  user_id_friends: [ID!]!
}

input DeleteGoalInput {
  id: String
}

input DeleteGoalMemberInput {
  user_id: ID
  goal_root_id: ID
}

input DeleteGoalRootInput {
  id: ID
  is_admin: Boolean
}

input DeleteGoalScoreInput {
  id: ID!
}

input DeleteGoalTemplateInput {
  goal_id: ID!
}

input DeleteHistoryPaymentInput {
  id: ID!
}

input DeleteJapaneseKanjiInput {
  id: ID!
}

input DeleteJapaneseLearnInput {
  id: ID!
}

input DeleteJapanesePostInput {
  id: ID!
}

input DeleteMemberFriendGroupInput {
  id: ID!
  member_ids: [ID!]!
}

input DeleteNoteInput {
  id: ID!
}

input DeletePaymentInput {
  id: ID!
}

input DeleteRoleOrPermissionInput {
  id: ID!
  type: TYPE!
}

input deleteTaskInput {
  ids: [ID]
  date: String
  is_all: Boolean
}

input deleteUserEditGoalInput {
  id: ID!
}

type DetailTemplate {
  trial: Int!
  percent_trial: Float!
  paid_confirmed: Int!
  percent_paid_confirmed: Float!
  on_buy: Int!
  percent_on_buy: Float!
  in_need: Int!
  percent_in_need: Float!
}

type Diary {
  id: ID!
  user: User!
  goal: Goal!
  image: String
  content: String
  reviews: [ReviewStoryShare]
  created_at: DateTime!
  updated_at: DateTime!
}

input EditGoalRootInput {
  id: ID
  name: String
  description: String
  price: Int
  status: String
  video: JSON
  image: JSON
  owner_percent: String
  start_day: DateTime
  end_day: DateTime
  trial_blocks: JSON
  is_trial: Boolean
  is_admin: Boolean
}

input EditTaskInput {
  id: ID
  name: String
  status: String
  repeat: String
  at_time: String
  reminder: String
  text_color: String
  date: String
}

enum FilterExpiry {
  expired
  availability
  all
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordResponse {
  status: String!
  message: String
}

type Friend {
  id: ID
  user: User
  friend: User
  status: String
  user_id: ID
  user_id_friend: ID
  created_at: DateTime!
  updated_at: DateTime!
}

type FriendGroup {
  id: ID
  user: User
  name: String
  member_ids: JSON
  members: [User]
  description: String
  avatar: String
  count_members: Int
  created_at: DateTime
  updated_at: DateTime
}

type Goal {
  id: String
  name: String
  parent: Goal
  user: User
  goal_root: GoalRoot
  parent_id: ID
  user_id: ID
  root_id: ID
  report_type: String
  created_at: DateTime!
  updated_at: DateTime!
}

type GoalBlock {
  id: ID
  goal_id: ID
  is_paid: Boolean
  name: String
  type: String
}

type GoalMember {
  id: ID
  add_user: User
  user: User
  user_id: ID
  add_user_id: ID
  goal_id: ID
  goal: Goal
  number_member: Int
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of GoalMember items."""
type GoalMemberPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of GoalMember items."""
  data: [GoalMember!]!
}

type GoalParent {
  id: String!
  name: String!
  children: [Goal]
  user: User
  goal_root: GoalRoot!
  created_at: DateTime!
  updated_at: DateTime!
}

type GoalRank {
  id: ID
  user_id: ID
  user: User
  goal_id: ID
  goal: Goal
  pin_index: Int
  created_at: DateTime
  updated_at: DateTime
}

type GoalRoot {
  id: ID
  name: String
  user_id: ID
  user: User
  sellRequest: GoalTemplate
  description: String
  goal_score: GoalScore
  total_score: String
  price: Int
  status: String
  video: JSON
  image: JSON
  type: String
  report_type: String
  owner_percent: String
  detailed_income: JSON
  trial_blocks: JSON
  is_trial: Boolean
  enable_editor: Boolean
  start_day: DateTime
  end_day: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

type GoalScore {
  id: ID
  user_id: ID
  user: User
  goal_id: ID
  goal: Goal
  scores: JSON
  sum: String
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of GoalScore items."""
type GoalScorePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of GoalScore items."""
  data: [GoalScore!]!
}

type GoalTemplate {
  id: ID
  user_id: ID
  goal_id: ID
  goal: GoalRoot
  status: String
  request: String
  sell_goal: String
  message: String
  checked_time: Int
  sum_member: Int
  created_at: DateTime!
  updated_at: DateTime!
}

type HistoryPayment {
  id: ID!
  user: User!
  payment: Payment!
  note: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type InfoCoupon {
  total: Int
  last_page: Int
  expired: Int
  availability: Int
}

type InfoTemplate {
  id: ID!
  goal: GoalRoot!
  status: String!
  sum_member: Int!
  detail_template: DetailTemplate
  created_at: DateTime!
  updated_at: DateTime!
}

type JapaneseGoal {
  id: ID
  user: User
  list_users: [User]
  goal: Goal
  goal_root: Goal
  root_id: ID
  goal_id: ID
  type: String
  more: JSON
  total_score: Float
  each_score: Float
  score: Float
  is_paid: Boolean
}

"""A paginated list of JapaneseGoal items."""
type JapaneseGoalPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of JapaneseGoal items."""
  data: [JapaneseGoal!]!
}

type JapaneseKanji {
  id: ID
  user_id: ID
  user: User
  name: String
  more: JSON
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of JapaneseKanji items."""
type JapaneseKanjiPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of JapaneseKanji items."""
  data: [JapaneseKanji!]!
}

type JapaneseLearn {
  id: ID
  user_id: ID
  user: User
  goal_id: ID
  goal: Goal
  goal_no_childs: [Goal]
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of JapaneseLearn items."""
type JapaneseLearnPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of JapaneseLearn items."""
  data: [JapaneseLearn!]!
}

type JapanesePost {
  id: ID
  user_id: ID
  user: User
  goal_id: ID
  type: String
  goal: Goal
  japanese_goal: JapaneseGoal
  title: String
  description: String
  media: JSON
  likes: JSON
  more: JSON
  created_at: DateTime!
  updated_at: DateTime!
}

"""A paginated list of JapanesePost items."""
type JapanesePostPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of JapanesePost items."""
  data: [JapanesePost!]!
}

type JPLearn {
  id: ID!
  user: User!
  goal: Goal!
  created_at: DateTime!
  updated_at: DateTime!
}

"""A JSON with format `{}, []`"""
scalar JSON

type ListUser {
  data: [User]
  paginatorInfo: PaginatorInfo
}

input LoginInput {
  username: String!
  password: String!
}

type LogoutResponse {
  status: String!
  message: String
}

type Mutation {
  login(input: LoginInput): AuthPayload!
  refreshToken(input: RefreshTokenInput): RefreshTokenPayload!
  logout: LogoutResponse!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
  updateForgottenPassword(input: NewPasswordWithCodeInput): ForgotPasswordResponse!
  register(input: RegisterInput): RegisterResponse!
  socialLogin(input: SocialLoginInput!): AuthPayload!
  verifyEmail(input: VerifyEmailInput!): AuthPayload!
  updatePassword(input: UpdatePassword!): UpdatePasswordResponse!
  confirm_email(input: ConfirmEmailInput!): JSON
  upsert_coach_member(input: UpsertCoachMemberInput!): CoachMember
  delete_coach_member(input: DeleteCoachMemberInput!): Boolean
  delete_coach_from_goal(input: DeleteCoachFromGoal!): Boolean
  upsert_coupon(input: UpsertCouponInput!): Coupon
  delete_coupon(input: DeleteCouponInput!): JSON
  upsert_friend(input: UpsertFriendInput!): Friend
  add_friend(input: AddFriendInput!): Friend
  delete_friends(input: DeleteFriendInput!): Boolean
  create_friend_groups(input: CreateFriendGroupInput!): FriendGroup
  update_friend_groups(input: UpdateFriendGroupInput!): FriendGroup
  delete_friend_groups(input: DeleteFriendGroupInput!): Boolean
  delete_member_friend_groups(input: DeleteMemberFriendGroupInput!): Boolean
  add_member_friend_groups(input: AddMemberFriendGroupInput!): FriendGroup
  create_goal(input: CreateGoalInput!): Goal
  upsert_goal(input: UpsertGoalInput!): Goal
  delete_goal(input: DeleteGoalInput!): Boolean
  update_goal_move(input: UpdateGoalMoveInput!): JSON
  duplicate_goals(id: ID!, new_id: ID!): JSON
  upsert_goal_member(input: UpsertGoalMemberInput!): [GoalMember]
  delete_goal_member(input: DeleteGoalMemberInput!): Boolean
  delete_member_from_goal(input: DeleteGoalMemberInput!): Boolean
  upsert_goal_rank(input: UpsertGoalRankInput!): Boolean
  create_goal_root(input: CreateGoalRootInput!): GoalRoot
  edit_goal_root(input: EditGoalRootInput!): GoalRoot
  upsert_goal_root(input: EditGoalRootInput!): GoalRoot
  delete_goal_root(input: DeleteGoalRootInput!): Boolean
  delete_goal_score(input: DeleteGoalScoreInput!): Boolean
  upsert_goal_score(input: UpsertGoalScoreInput!): GoalScore
  update_goal_score(input: UpdateGoalScoreInput!): GoalScore
  create_goal_template(input: CreateGoalTemplateInput!): GoalTemplate
  upsert_goal_template(input: UpsertGoalTemplateInput!): GoalTemplate
  delete_goal_template(input: DeleteGoalTemplateInput!): JSON
  create_history_payment(input: CreateHistoryPaymentInput!): HistoryPayment
  delete_history_payment(input: DeleteHistoryPaymentInput!): JSON
  delete_japanese_goals(id: ID!): Boolean
  create_japanese_goals(input: CreateJapaneseGoalInput!): JapaneseGoal
  update_japanese_goals(input: UpdateJapaneseGoalInput!): JapaneseGoal
  upsert_japanese_goals(input: UpsertJapaneseGoalInput!): JapaneseGoal
  updateMeetUrl_sing_with_friend(input: UpdateMeetUrlInput!): Boolean
  delete_japanese_kanji(input: DeleteJapaneseKanjiInput!): Boolean
  create_japanese_kanji(input: CreateJapaneseKanjiInput!): JapaneseKanji
  upsert_japanese_kanji(input: UpsertJapaneseKanjiInput!): JapaneseKanji
  update_japanese_kanji(input: UpdateJapaneseKanjiInput!): JapaneseKanji
  delete_japanese_learn(input: DeleteJapaneseLearnInput!): Boolean
  upsert_japanese_learn(input: UpsertJapaneseLearnInput!): JapaneseLearn
  update_japanese_learn(input: UpdateJapaneseLearnInput!): JapaneseLearn
  upsert_japanese_post(input: UpsertJapanesePostInput!): JapanesePost
  create_japanese_post(input: CreateJapanesePostInput!): JapanesePost
  update_japanese_posts(input: UpdateJapanesePostInput!): JapanesePost
  delete_japanese_posts(input: DeleteJapanesePostInput!): Boolean
  create_note(input: CreateNoteInput!): Note
  update_note(input: UpdateNoteInput!): Note
  delete_note(input: DeleteNoteInput!): Boolean
  create_notifi_comment(input: CreateNotifiCommentInput!): Boolean
  upsert_payment(input: UpsertPaymentInput!): [Payment]
  delete_payment(input: DeletePaymentInput!): Boolean
  upsert_review_story_share(input: UpsertReviewStoryShareInput!): ReviewStoryShare
  create_role_or_permission(input: CreateRoleOrPermissionInput!): RoleAndPermission
  assign_role(input: AssignRoleInput!): [RoleAndPermission]
  assign_and_remove_role(input: AssignRoleInput!): User
  remove_role(input: AssignRoleInput!): [RoleAndPermission]
  revoke_permission(input: AssignPermissionInput!): [RoleAndPermission]
  delete_role_or_permission(input: DeleteRoleOrPermissionInput!): Boolean
  create_story_share(input: CreateStoryShareInput!): StoryShare
  update_story_share(input: UpdateStoryShareInput!): StoryShare
  delete_story_share(id: ID!): JSON
  create_task(input: CreateTaskInput!): Task
  update_task(input: EditTaskInput!): Task
  delete_task(input: deleteTaskInput!): Boolean
  task_toggle(id: ID!, date: String!): Task
  update_user(input: UpdateUserInput!): User
  create_user_edit_goal(input: CreateUserEditGoalInput!): UserEditGoal
  delete_user_edit_goal(input: deleteUserEditGoalInput!): Boolean
  remove_user_edit_goal(input: RemoveUserEditGoalInput!): Boolean
}

input NewPasswordWithCodeInput {
  email: String!
  token: String!
  password: String!
  password_confirmation: String!
}

type NextAndPrevGoal {
  current: GoalBlock
  next: GoalBlock
  prev: GoalBlock
}

type Note {
  id: ID
  user_id: ID
  type_id: ID
  type: String
  content: String
  text_color: String
  checked_at: String
  user: User
  created_at: DateTime
  updated_at: DateTime
}

"""A paginated list of Note items."""
type NotePaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Note items."""
  data: [Note!]!
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Aggregate functions when ordering by a relation without specifying a column.
"""
enum OrderByRelationAggregateFunction {
  """Amount of items."""
  COUNT
}

"""
Aggregate functions when ordering by a relation that may specify a column.
"""
enum OrderByRelationWithColumnAggregateFunction {
  """Average."""
  AVG

  """Minimum."""
  MIN

  """Maximum."""
  MAX

  """Sum."""
  SUM

  """Amount of items."""
  COUNT
}

"""Information about pagination using a Relay style cursor connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """The cursor to continue paginating backwards."""
  startCursor: String

  """The cursor to continue paginating forwards."""
  endCursor: String

  """Total number of nodes in the paginated connection."""
  total: Int!

  """Number of nodes in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the last available page."""
  lastPage: Int!
}

"""Information about pagination using a fully featured paginator."""
type PaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Are there more pages after this one?"""
  hasMorePages: Boolean!

  """Index of the last item in the current page."""
  lastItem: Int

  """Index of the last available page."""
  lastPage: Int!

  """Number of items per page."""
  perPage: Int!

  """Number of total available items."""
  total: Int!
}

type Payment {
  id: ID
  user: User
  user_id: ID
  add_user_id: ID
  add_user: User
  goal_id: ID
  user_info: JSON
  user_invite: User
  goal: GoalRoot
  type: String
  status: String
  money: Int
  note: String
  code_sale: String
  attachments: JSON
  created_at: DateTime
  updated_at: DateTime
  number_member: Int
}

type PermissionOfRole {
  role: RoleAndPermission
  permissions: [RoleAndPermission]
}

union PostAndDiary = JapanesePost | StoryShare

type Progress {
  id: ID!
  name: String!
  user: User!
  owner_user: User!
  goal_score: GoalScore
  total_score: String!
}

type Query {
  user(id: ID): User
  check_goals(user_id: ID!, goal_root_id: ID!): [CheckGoal]
  detail_coach_member(user_id: ID!): CoachMember
  list_coach_members(goal_root_id: ID): [User]
  list_coupons: [Coupon]
  sort_coupons(first: Int, page: Int, expiry: FilterExpiry): SortCoupon
  check_coupon(goal_root_id: ID!, code: String!): checkCoupon
  my_friends: [User]
  list_invite_friends: [User]
  my_friend_groups: [FriendGroup]
  all_goal: [Goal]
  detail_goal(id: ID!): Goal
  list_goal_by_parent_id(parent_id: ID): [Goal]
  goal_by_parent_ids(parent_ids: [ID]): [Goal]
  my_tree_goal(goal_id: ID): JSON
  my_tree_goal_v2(goal_id: ID): JSON
  my_goal(root_id: ID): [Goal]
  list_goal_trials(root_id: ID!): [GoalParent]
  goal_members(name_add_user: String, name_goal: String): [GoalMember]
  my_goal_members: [GoalMember]
  detail_goal_member(id: ID!): GoalMember
  summary_goal_members: [GoalMember]
  list_goal_root: [GoalRoot]
  my_goal_root: [GoalRoot]
  goal_root_by_user(user_id: ID!): [GoalRoot]
  dollar_my_own_goal_root: [GoalRoot]
  detail_goal_root(id: ID): GoalRoot
  my_progress: [Progress]
  user_progress(user_id: ID!, goal_root_id: ID!): Progress
  check_coach(tab: Tab!, goal_root_id: ID!): Boolean
  my_goal_score: [GoalScore]
  detail_goal_score(id: ID, goal_id: ID): GoalScore
  list_goal_score(user_id: ID!, goal_root_id: ID!): Score
  list_goal_template(status: String, first: Int, page: Int): [GoalTemplate]
  info_goal_template(goal_root_id: ID!): InfoTemplate
  history_payment(first: Int!, page: Int!, payment_id: ID): [HistoryPayment]
  sum_history_payment(payment_id: ID): SumHistoryPayment
  history_payments_by_date(date_from: String!, date_to: String!, payment_id: ID): [HistoryPayment]
  detail_japanese_goal(id: ID, goal_id: ID): JapaneseGoal
  search_by_type_japanese_goal(type: String): [JapaneseGoal]
  auto_play_japanese_goal(root_id: ID): JapaneseGoal
  prev_next_goal(goal_id: ID): NextAndPrevGoal
  my_japanese_kanji: [JapaneseKanji]
  detail_japanese_kanji(id: ID): JapaneseKanji
  list_japanese_kanji(ids: [ID]): [JapaneseKanji]
  vocabulary_japanese_kanji: [JapaneseKanji]
  my_japanese_learn: [JapaneseLearn]
  detail_japanese_learn(id: ID): JapaneseLearn
  list_userid_japanese_learn(goal_id: ID!): UserID
  progress_user_japanese_learn(name: String): JSON
  progress_user(goal_root_id: ID!): [User]
  list_progress_by_user(goal_root_id: ID!, user_id: ID!): [JPLearn]
  detail_japanese_posts(id: ID, goal_id: ID): JapanesePost
  my_japanese_posts: [JapanesePost]
  other_japanese_posts(goal_id: ID): [JapanesePost]
  list_japanese_post(goal_id: ID): [JapanesePost]
  list_japanese_posts_by_goal_root(user_id: ID, goal_root_id: ID): [JapanesePost]
  list_posts_and_diary(user_id: ID, goal_root_id: ID): [PostAndDiary]
  detail_notes(id: ID): Note
  my_notes(day: String, type: String): [Note]
  note_by_month(month: String!, type: String!): [Note]
  sort_payments(first: Int, page: Int, status: String, search: SearchPayment): [Payment]
  sort_payments_by_date(status: String, date_from: String!, date_to: String!): [Payment]
  my_payments: [Payment]
  detail_payment(id: ID!): Payment
  my_total_payment: JSON
  detail_my_payment(goal_id: ID!): [Payment]
  sum_payment(status: String): SumPayment
  user_roles(user_id: ID!): [RoleAndPermission]
  role_permissions(role_id: ID!): PermissionOfRole
  my_story_share(goal_id: ID): [StoryShare]
  my_story_share_by_goal_root(goal_root_id: ID!): [StoryShare]
  reviewer_story_share(goal_id: ID): [StoryShare]
  reviewer_story_share_by_goal_root(goal_root_id: ID!): [StoryShare]
  list_story_share_by_goal_root(user_id: ID!, goal_root_id: ID!): [Diary]
  tasks_by_month(month: String): [Task]
  tasks_sort_by_day(month: String): [TaskByMonth]
  detail_task(id: ID): Task
  my_tasks(date: String!): [Task]
  detail_me: User
  list_user(phone_number: String, role: String, email: String, name: String, first: Int!, page: Int!, orderBy: [OrderByClause!]): ListUser
  list_student(goal_root_id: ID): [User]
  detail_user(id: ID!): User
  list_user_edit_goal(goal_root_id: ID): [UserEditGoal]
  users(
    """Limits number of fetched items."""
    first: Int = 10

    """The offset from which items are returned."""
    page: Int
  ): UserPaginator
  coach_member(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): CoachMemberPaginator
  sort_goal_members(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): GoalMemberPaginator
  goal_score(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): GoalScorePaginator
  sort_goal_score(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): GoalScorePaginator
  japanese_goals(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseGoalPaginator
  sort_japanese_goals(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseGoalPaginator
  japanese_kanji(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseKanjiPaginator
  sort_japanese_kanji(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseKanjiPaginator
  japanese_learn(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseLearnPaginator
  sort_japanese_learn(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapaneseLearnPaginator
  japanese_posts(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapanesePostPaginator
  sort_japanese_posts(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): JapanesePostPaginator
  note(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): NotePaginator
  sort_notes(
    orderBy: [OrderByClause!]

    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): NotePaginator
  list_roles(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): RoleAndPermissionPaginator
  list_permission(
    """Limits number of fetched items."""
    first: Int!

    """The offset from which items are returned."""
    page: Int
  ): RoleAndPermissionPaginator
}

input RefreshTokenInput {
  refresh_token: String
}

type RefreshTokenPayload {
  access_token: String!
  refresh_token: String!
  expires_in: Int!
  token_type: String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  password_confirmation: String!
}

type RegisterResponse {
  tokens: AuthPayload
  status: RegisterStatuses!
}

enum RegisterStatuses {
  MUST_VERIFY_EMAIL
  SUCCESS
}

input RemoveUserEditGoalInput {
  user_id: ID!
  goal_root_id: ID!
}

input resetUserPasswordInput {
  email: String!
  token: String
  code: String
  password: String!
  password_confirmation: String!
}

type ReviewStoryShare {
  id: ID
  user: User
  story_share: StoryShare
  content: String
  is_read: Boolean
  created_at: DateTime!
  updated_at: DateTime!
}

type RoleAndPermission {
  id: Int!
  name: String!
  permissions: [RoleAndPermission]
  role: [RoleAndPermission]
  created_at: DateTime!
  updated_at: DateTime!
}

"""A paginated list of RoleAndPermission items."""
type RoleAndPermissionPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of RoleAndPermission items."""
  data: [RoleAndPermission!]!
}

type Score {
  score: String
  total_score: String
  achievement: String
  sum_topic: String
}

input SearchPayment {
  user_name: String
  email: String
  phone_number: String
  goal_name: String
}

"""Information about pagination using a simple paginator."""
type SimplePaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Index of the last item in the current page."""
  lastItem: Int

  """Number of items per page."""
  perPage: Int!

  """Are there more pages after this one?"""
  hasMorePages: Boolean!
}

input SocialLoginInput {
  provider: String!
  token: String!
}

type SortCoupon {
  data: [Coupon]
  info: InfoCoupon
}

"""Directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

enum STATUS {
  ON_BUY
  TRIAL
  IN_NEED
  PAID_CONFIRMED
}

type StoryShare {
  id: ID
  user_id: ID
  user: User
  goal_id: ID
  goal: Goal
  image: String
  content: String
  reviewers: JSON
  reviews: [ReviewStoryShare]
  created_at: DateTime!
  updated_at: DateTime!
}

type SumHistoryPayment {
  sum: Int!
}

type SumPayment {
  sum: Int
  number_status: Int
}

enum Tab {
  student
  coach
}

type Task {
  id: ID
  name: String
  user_id: ID
  status: String
  repeat: String
  at_time: String
  reminder: String
  text_color: String
  check_at: [TodoList]
  created_at: DateTime!
  updated_at: DateTime!
}

type TaskByMonth {
  day: String
  tasks: [Task]
}

type TodoList {
  id: ID
  name: String
  user: User
  task_id: ID
  status: String
  at_time: String
  reminder: String
  text_color: String
  checked_at: String
  created_at: DateTime!
  updated_at: DateTime!
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}

enum Type {
  study
  template
}

enum TYPE {
  ROLE
  PERMISSION
}

input UpdateFriendGroupInput {
  id: ID
  name: String
  member_ids: [ID]
  description: String
  avatar: String
}

input UpdateGoalMemberInput {
  id: ID!
  add_user_id: ID
  goal_id: ID
}

input UpdateGoalMoveInput {
  goal_move: JSON
}

input UpdateGoalRankInput {
  id: ID!
  goal_id: ID
  pin_index: Int
}

input UpdateGoalScoreInput {
  id: ID!
  goal_id: ID
  scores: JSON
}

input UpdateJapaneseGoalInput {
  id: ID
  goal_id: ID
  type: String
  more: JSON
  total_score: Float
  each_score: Float
  score: Float
  root_id: ID
}

input UpdateJapaneseKanjiInput {
  id: ID!
  name: String
  more: JSON
}

input UpdateJapaneseLearnInput {
  id: ID!
  goal_id: ID
}

input UpdateJapanesePostInput {
  id: ID!
  title: String
  type: String
  description: String
  media: JSON
  likes: JSON
  more: JSON
}

input UpdateMeetUrlInput {
  goal_id: ID!
  meet: JSON
}

input UpdateNoteInput {
  id: ID
  type_id: ID
  type: String
  content: String
  text_color: String
  checked_at: String
}

input UpdatePassword {
  old_password: String!
  password: String!
  password_confirmation: String!
}

type UpdatePasswordResponse {
  status: String!
  message: String
}

input UpdatePaymentInput {
  id: ID!
  add_user_id: ID
  goal_id: ID
  status: STATUS
  type: String
  user_info: JSON
  money: String
  note: String
  attachments: JSON
}

input UpdateStoryShareInput {
  id: ID
  goal_id: ID
  image: String
  content: String
  reviewers: [ID]
}

input UpdateUserInput {
  id: ID
  role_label: String
  email: String
  permission: JSON
  username: String
  phone_number: String
  first_name: String
  name: String
  address: String
  current_address: JSON
  country: String
  gender: String
  date_of_birth: String
  roles: JSON
  is_flag: Boolean
  quotes: String
  avatar: String
  banner: String
}

input UpsertCoachMemberInput {
  user_id: ID
  goal_ids: [ID]
}

input UpsertCouponInput {
  code: String!
  limit: Int
  sale_percent: Int!
  goal_root_ids: [ID]
  expiry_date: String
}

input UpsertFriendInput {
  user_id_friend: ID!
  status: String
}

input UpsertGoalInput {
  id: String
  name: String
  parent_id: ID
  root_id: ID
  report_type: String
}

input UpsertGoalMemberInput {
  id: ID
  add_user_id: ID
  goal_id: ID
  goal_ids: [ID]
}

input UpsertGoalRankInput {
  goal_ids: [ID]
}

input UpsertGoalScoreInput {
  id: ID
  goal_id: ID
  scores: JSON
}

input UpsertGoalTemplateInput {
  goal_id: ID
  status: String
  request: String
  sell_goal: String
  message: String
}

input UpsertJapaneseGoalInput {
  id: ID
  parent_id: ID
  root_id: ID
  name_goal: String
  type: String
  more: JSON
  total_score: Float
  each_score: Float
}

input UpsertJapaneseKanjiInput {
  id: ID
  name: String
  more: JSON
}

input UpsertJapaneseLearnInput {
  id: ID
  goal_id: ID
}

input UpsertJapanesePostInput {
  id: ID
  goal_id: ID
  title: String
  type: String
  description: String
  media: JSON
  likes: JSON
  more: JSON
}

input UpsertPaymentInput {
  id: ID
  add_user_id: ID
  goal_id: [ID]
  status: STATUS
  user_info: JSON
  type: String
  code_sale: String
  money: Int
  note: String
  attachments: JSON
}

input UpsertReviewStoryShareInput {
  story_share_id: ID
  content: String
  is_read: Boolean
}

type User {
  id: ID
  first_name: String
  name: String
  address: String
  current_address: JSON
  country: String
  gender: String
  date_of_birth: String
  permission: JSON
  roles: JSON
  is_flag: Boolean
  quotes: String
  avatar: String
  banner: String
  score: Int
  email: String
  username: String
  total_goal: Int
  total_friend: Int
  sum_day_learn: Int
  percent_learn: Float
  role_label: String
  phone_number: String
  attachment: Attachment
  progress: [JapaneseLearn]
  created_at: DateTime!
  updated_at: DateTime!
}

type UserEditGoal {
  id: ID!
  user: User!
  goal_root: GoalRoot!
  created_at: DateTime!
  updated_at: DateTime!
}

type UserID {
  user_ids: [ID]
}

"""A paginated list of User items."""
type UserPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of User items."""
  data: [User!]!
}

type UserRole {
  user: User
  roles: [RoleAndPermission]
}

input VerifyEmailInput {
  token: String!
}
